/*
 * Generated API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ml.raketeufo.thirestbridge.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import ml.raketeufo.thirestbridge.api.model.ListCourseEvent;
import ml.raketeufo.thirestbridge.api.model.ListIntervalEvent;
import ml.raketeufo.thirestbridge.api.model.ListSpecialEvent;
/**
 * Timetable
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-07-05T00:54:42.271211+02:00[Europe/Berlin]")
public class Timetable {
  @SerializedName("courses")
  private ListCourseEvent courses = null;

  @SerializedName("intervals")
  private ListIntervalEvent intervals = null;

  @SerializedName("semester")
  private String semester = null;

  @SerializedName("specials")
  private ListSpecialEvent specials = null;

  public Timetable courses(ListCourseEvent courses) {
    this.courses = courses;
    return this;
  }

   /**
   * Get courses
   * @return courses
  **/
  @Schema(description = "")
  public ListCourseEvent getCourses() {
    return courses;
  }

  public void setCourses(ListCourseEvent courses) {
    this.courses = courses;
  }

  public Timetable intervals(ListIntervalEvent intervals) {
    this.intervals = intervals;
    return this;
  }

   /**
   * Get intervals
   * @return intervals
  **/
  @Schema(description = "")
  public ListIntervalEvent getIntervals() {
    return intervals;
  }

  public void setIntervals(ListIntervalEvent intervals) {
    this.intervals = intervals;
  }

  public Timetable semester(String semester) {
    this.semester = semester;
    return this;
  }

   /**
   * Get semester
   * @return semester
  **/
  @Schema(description = "")
  public String getSemester() {
    return semester;
  }

  public void setSemester(String semester) {
    this.semester = semester;
  }

  public Timetable specials(ListSpecialEvent specials) {
    this.specials = specials;
    return this;
  }

   /**
   * Get specials
   * @return specials
  **/
  @Schema(description = "")
  public ListSpecialEvent getSpecials() {
    return specials;
  }

  public void setSpecials(ListSpecialEvent specials) {
    this.specials = specials;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timetable timetable = (Timetable) o;
    return Objects.equals(this.courses, timetable.courses) &&
        Objects.equals(this.intervals, timetable.intervals) &&
        Objects.equals(this.semester, timetable.semester) &&
        Objects.equals(this.specials, timetable.specials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courses, intervals, semester, specials);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timetable {\n");
    
    sb.append("    courses: ").append(toIndentedString(courses)).append("\n");
    sb.append("    intervals: ").append(toIndentedString(intervals)).append("\n");
    sb.append("    semester: ").append(toIndentedString(semester)).append("\n");
    sb.append("    specials: ").append(toIndentedString(specials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
